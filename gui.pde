/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:orbitControls:999015:
  appc.background(230);
} //_CODE_:orbitControls:999015:

public void showOrbits_clicked(GCheckbox source, GEvent event) { //_CODE_:showOrbits:324807:
  if (showOrbits.isSelected() == true) {
    showOrbit = true;
  }
  else {
    showOrbit = false;
  }
} //_CODE_:showOrbits:324807:

public void showVector_clicked(GCheckbox source, GEvent event) { //_CODE_:showVectors:719964:
  if (showVectors.isSelected() == true) {
    showVector = true;
  }
  else {
    showVector = false;
  }
} //_CODE_:showVectors:719964:

public void timeSlider_changed(GSlider source, GEvent event) { //_CODE_:timeChange:335512:
  dT = timeChange.getValueF();
} //_CODE_:timeChange:335512:

public void showMag_clicked(GCheckbox source, GEvent event) { //_CODE_:showMagnitude:251055:
  if (showMagnitude.isSelected() == true) {
    showMag = true;
  }
  else {
    showMag = false;
  }
} //_CODE_:showMagnitude:251055:

public void add_clicked(GButton source, GEvent event) { //_CODE_:add:418973:
  if (!startMoving) {
    startMoving = true;
    setInitalPositions();
    
    newOrbiter.setInital(sun);
    newOrbiter.r = r;
    
    e = findE(newOrbiter);
    
    newOrbiter.dTheta = findDTheta(sun, newOrbiter);
    newOrbiter.theta = theta;
    
    newOrbiter.e = e;
    
    periapsis = 2 * 50;
    apoapsis = 2 * 50;
    r = 2 * 50;
  }
} //_CODE_:add:418973:

public void apoapsisSlider_changed(GSlider source, GEvent event) { //_CODE_:apoapsisSlider:444410:
  if (!startMoving) {
    apoapsis = apoapsisSlider.getValueF() * 50;
    newOrbiter.apoapsis = apoapsis;
  }
} //_CODE_:apoapsisSlider:444410:

public void sizeOfObject_changed(GSlider source, GEvent event) { //_CODE_:sizeOfObject:719139:
  if (!startMoving) {
    newOrbiter.mass = sizeOfObject.getValueF();
  }
} //_CODE_:sizeOfObject:719139:

public void periapsisSlider_changed(GSlider source, GEvent event) { //_CODE_:periapsisSlider:529151:
  if (!startMoving) {
    periapsis = periapsisSlider.getValueF() * 50;
    newOrbiter.periapsis = periapsis;
  }
} //_CODE_:periapsisSlider:529151:

public void radiusSlider_changed(GSlider source, GEvent event) { //_CODE_:radiusSlider:937178:
  if (!startMoving) {
    r = radiusSlider.getValueF() * 50;
    newOrbiter.r = r;
  }
} //_CODE_:radiusSlider:937178:

public void showSOI_clicked(GCheckbox source, GEvent event) { //_CODE_:SOI_clicked:971567:
  if (SOI_clicked.isSelected() == true) {
    showSOI = true;
  }
  else {
    showSOI = false;
  }
} //_CODE_:SOI_clicked:971567:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  orbitControls = GWindow.getWindow(this, "Orbit Controls", 0, 0, 240, 500, JAVA2D);
  orbitControls.noLoop();
  orbitControls.setActionOnClose(G4P.KEEP_OPEN);
  orbitControls.addDrawHandler(this, "win_draw1");
  showOrbits = new GCheckbox(orbitControls, 7, 107, 120, 20);
  showOrbits.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showOrbits.setText("Show Orbits");
  showOrbits.setOpaque(false);
  showOrbits.addEventHandler(this, "showOrbits_clicked");
  showOrbits.setSelected(true);
  showVectors = new GCheckbox(orbitControls, 7, 133, 120, 20);
  showVectors.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showVectors.setText("Show Vectors");
  showVectors.setOpaque(false);
  showVectors.addEventHandler(this, "showVector_clicked");
  showVectors.setSelected(true);
  timeChange = new GSlider(orbitControls, 6, 39, 227, 54, 10.0);
  timeChange.setShowValue(true);
  timeChange.setShowLimits(true);
  timeChange.setLimits(0.5, 0.0, 1.0);
  timeChange.setShowTicks(true);
  timeChange.setNumberFormat(G4P.DECIMAL, 2);
  timeChange.setOpaque(false);
  timeChange.addEventHandler(this, "timeSlider_changed");
  simulationSpeed = new GLabel(orbitControls, 56, 73, 127, 20);
  simulationSpeed.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  simulationSpeed.setText("Simulation Speed");
  simulationSpeed.setOpaque(false);
  showMagnitude = new GCheckbox(orbitControls, 7, 161, 120, 20);
  showMagnitude.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  showMagnitude.setText("Show Magnitude");
  showMagnitude.setOpaque(false);
  showMagnitude.addEventHandler(this, "showMag_clicked");
  showMagnitude.setSelected(true);
  createSatelite = new GLabel(orbitControls, 0, 225, 143, 24);
  createSatelite.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  createSatelite.setText("Create Satelite or Planet");
  createSatelite.setOpaque(false);
  add = new GButton(orbitControls, 7, 439, 80, 30);
  add.setText("Start Simulation");
  add.addEventHandler(this, "add_clicked");
  apoapsisSlider = new GSlider(orbitControls, 3, 267, 115, 56, 10.0);
  apoapsisSlider.setShowValue(true);
  apoapsisSlider.setShowLimits(true);
  apoapsisSlider.setLimits(2.0, 0.0, 12.0);
  apoapsisSlider.setShowTicks(true);
  apoapsisSlider.setNumberFormat(G4P.DECIMAL, 2);
  apoapsisSlider.setOpaque(false);
  apoapsisSlider.addEventHandler(this, "apoapsisSlider_changed");
  sizeOfObject = new GSlider(orbitControls, 8, 382, 222, 51, 10.0);
  sizeOfObject.setShowValue(true);
  sizeOfObject.setShowLimits(true);
  sizeOfObject.setLimits(24995.0, 100.0, 50000.0);
  sizeOfObject.setShowTicks(true);
  sizeOfObject.setNumberFormat(G4P.DECIMAL, 2);
  sizeOfObject.setOpaque(false);
  sizeOfObject.addEventHandler(this, "sizeOfObject_changed");
  apoapsisText = new GLabel(orbitControls, -15, 293, 147, 31);
  apoapsisText.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  apoapsisText.setText("Apoapsis");
  apoapsisText.setOpaque(false);
  mass = new GLabel(orbitControls, 66, 413, 103, 20);
  mass.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  mass.setText("Object Mass (kg)");
  mass.setOpaque(false);
  periapsisSlider = new GSlider(orbitControls, 116, 268, 116, 53, 10.0);
  periapsisSlider.setShowValue(true);
  periapsisSlider.setShowLimits(true);
  periapsisSlider.setLimits(2.0, 0.0, 12.0);
  periapsisSlider.setShowTicks(true);
  periapsisSlider.setNumberFormat(G4P.DECIMAL, 2);
  periapsisSlider.setOpaque(false);
  periapsisSlider.addEventHandler(this, "periapsisSlider_changed");
  label1 = new GLabel(orbitControls, 132, 300, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Periapsis");
  label1.setOpaque(false);
  label2 = new GLabel(orbitControls, 0, 4, 99, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("General Controls");
  label2.setOpaque(false);
  radiusSlider = new GSlider(orbitControls, 7, 326, 224, 53, 10.0);
  radiusSlider.setShowValue(true);
  radiusSlider.setShowLimits(true);
  radiusSlider.setLimits(2.0, 0.1, 10.0);
  radiusSlider.setShowTicks(true);
  radiusSlider.setNumberFormat(G4P.DECIMAL, 2);
  radiusSlider.setOpaque(false);
  radiusSlider.addEventHandler(this, "radiusSlider_changed");
  label3 = new GLabel(orbitControls, 60, 356, 120, 29);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Radius of Orbit");
  label3.setOpaque(false);
  SOI_clicked = new GCheckbox(orbitControls, 7, 188, 120, 20);
  SOI_clicked.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  SOI_clicked.setText("Show SOI");
  SOI_clicked.setOpaque(false);
  SOI_clicked.addEventHandler(this, "showSOI_clicked");
  orbitControls.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow orbitControls;
GCheckbox showOrbits; 
GCheckbox showVectors; 
GSlider timeChange; 
GLabel simulationSpeed; 
GCheckbox showMagnitude; 
GLabel createSatelite; 
GButton add; 
GSlider apoapsisSlider; 
GSlider sizeOfObject; 
GLabel apoapsisText; 
GLabel mass; 
GSlider periapsisSlider; 
GLabel label1; 
GLabel label2; 
GSlider radiusSlider; 
GLabel label3; 
GCheckbox SOI_clicked; 
